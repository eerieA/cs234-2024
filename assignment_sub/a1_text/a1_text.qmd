---
title: "A1"
bibliography: references.bib
execute:
  enabled: true
  cache: true
format:
  html: 
    css: styles.css
    number-sections: true
---

## Effect of Effective Horizon [8 pts]

Consider an agent managing inventory for a store, which is represented as an MDP. The stock level $s$ refers to the number of items currently in stock (between 0 and 10, inclusive). At any time, the agent has two actions: sell (decrease stock by one, if possible) or buy (increase stock by one, if possible).

- If $s > 0$ and the agent sells, it receives +1 reward for the sale and the stock level transitions to $s - 1$. If $s = 0$, nothing happens.
- If $s < 9$ and the agent buys, it receives no reward and the stock level transitions to $s + 1$.
- The owner of the store likes to see a fully stocked inventory at the end of the day, so the agent is rewarded with $+100$ if the stock level ever reaches the maximum level $s = 10$.
- $s = 10$ is also a terminal state and the problem ends if it is reached.

The reward function, denoted as $r(s, a, s')$, can be summarized concisely as follows:

- $r(s,\text{sell}, s-1) = 1$ for $s > 0$ and $r(0,\text{sell},0) = 0$
- $r(s, \text{buy}, s+1) = 0$ for $s < 9$ and $r(9, \text{buy}, 10) = 100$. The last condition indicates that transitioning from $s = 9$ to $s = 10$ (fully stocked) yields $+100$ reward.

The stock level is assumed to always start at $s = 3$ at the beginning of the day. We will consider how the agent's optimal policy changes as we adjust the finite horizon $H$ of the problem. Recall that the horizon $H$ refers to a limit on the number of time steps the agent can interact with the MDP before the episode terminates, regardless of whether it has reached a terminal state. We will explore properties of the optimal policy (the policy that achieves highest episode reward) as the horizon $H$ changes.

Consider, for example, $H = 4$. The agent can sell for three steps, transitioning from $s = 3$ to $s = 2$ to $s = 1$ to $s = 0$ receiving rewards $+1$, $+1$, and $+1$ for each sell action. At the fourth step, the inventory is empty so it can sell or buy, receiving no reward regardless. Then the problem terminates since time has expired.

**Questions**:

a. Starting from the initial state $s = 3$, is it possible to choose a value of $H$ that results in the optimal policy taking both buy and sell steps during its execution? Explain why or why not. [2 pts]

b. In the infinite-horizon discounted setting, is it possible to choose a fixed value of $\gamma \in [0, 1)$ such that the optimal policy starting from $s = 3$ never fully stocks the inventory? You do not need to propose a specific value, but simply explain your reasoning either way. [2 pts]

c. Does there **ever** exist a $\gamma$ such that the optimal policy for a MDP with a gamma is the same as a MDP with a finite horizon $H$? Please give an example of a particular $\gamma$ if there exists one. [2 pts]

d. Does there **always** exist a $\gamma$ such that the optimal policy for the MDP with $\gamma$ is the same as an MDP with finite horizon $H$? Please provide a discussion (1-2 sentences) describing your reasoning. [2 pts]


<div class="answer">

Answers:

a. Overall it is. Intuitively if $\gamma = 1$, it is not possible, because the reward at $s=9$ with action buy has a high reward $+100$, and the median reward $+1$ happens in a "one direction" fashion. There are no ties. With this trend, it is natrual to feel that the agent, starting from $s=3$, would either always buy to get that high reward, or always sell to get some median rewards. And indeed with the insight of $10-3=7$, we can divide finite $H$ into 2 cases: $0 \le H < 7$ and $H \ge 7$. For the first case the agent cannot see the big reward and will always sell, for the second case the agent will always buy until $s=10$ and stays there.
<br>
However, if $\gamma < 1$, it is possible. Because if the weight of the biggest reward is significantly lighter, then the agent will be motivated to sell for some nearer rewards, then buy to reach $s=10$. For example when $\gamma=0.5$, we can find $H=9$ that motivates the agent to sell first then buy until reaching $s=10$.

</div>

:::{.callout-tip title="Python function for calculation" collapse=true}
<div class="answer-cont">

```{python}
# Policy comparison: sell x times, then buy until s = 10
gamma = 0.5
H = 9
start_stock = 3
max_stock = 10
fs_reward = 100 # Final state (10) reward

def discounted_reward(x, gamma):
    """
    Calculate total discounted reward for:
    - Selling x times, each gives +1,
    - Then buying for 10-x+1 steps to reach s=10 (x <= 2).
    - Expecting to receive +100 at the step reaching s=10.
    """
    if x > H:
        return float('-inf')  # not feasible
    steps_needed_to_reach_10 = max_stock - start_stock
    if x + steps_needed_to_reach_10 > H:
        return float('-inf')  # can't reach s=10 in time

    # Step 1: Expected reward from selling x times
    reward = sum([gamma**t for t in range(x)])

    # Step 2: Expected reward from buying to reach s=10
    terminal_step = x + steps_needed_to_reach_10 - 1
    reward += gamma**terminal_step * fs_reward
    return reward
```

</div>
:::

<div class="answer-cont">

```{python}
print(f"Gamma = {gamma}, Horizon H = {H}")
print("Sell steps (x) | Total Expected Reward")
print("-" * 35)
for x in range(H + 1):
    val = discounted_reward(x, gamma)
    if val != float('-inf'):
        print(f"{x:^14} | {val:.4f}")
```

Note that the `Sell steps (0)` above indicates the all buy policy.
</div>

<div class="answer">

b. Yes. Similar with the example proposed in a, if $\gamma$ is very small then the agent will be attracted by nearer rewards that will be gained by selling, and continue oscillating between selling and buying at low $s$ states, thus never fully stocking.

c. Yes. As an extreme example, for a discounted MDP with infinite horizon we can set $\gamma=0$, then for a non-discounted MDP with finite horizon we set $H=1$, then these two MDPs will result in the same optimal strategy.

d. No. The finite horizon MDPs' optimal policies are horizon dependent, but the infinite horizon MDPs' are not, so there are cases where no $\gamma$ can make an infinite horizon MDP produce the same optimal policies as a finite one. Using the setting in this problem, the optimal policy under $H=9$ can be either all sell or first sell then buy, but with infinite horizon the optimal policy is fixed with a fixed $\gamma$. More generally speaking, there is not a one-to-one mapping from a finite horizon $H$ to some discount factor $\gamma$.

</div>

## Reward Hacking [5 pts]
Q1 illustrates how the particular  horizon and discount factor may lead to 
to very different policies, even with the same reward and dynamics model. This maylead to unintentional reward hacking, where the resulting policy does not match a human stakeholder's intended outcome. This problem asks you to think about an example where reward hacking may occur, introduced by Pan, Bhatia and Steinhardt\footnote{ICLR 2022 \url{https://openreview.net/pdf?id=JYtwGwIL7ye}}. Consider designing RL for autonomous cars where the goal is to have decision policies that minimize the mean commute for all drivers (those driven by humans andthose driven by AI). This reward might be tricky to specify (it depends on the destination of each car, etc) but a simpler reward (called the reward "proxy") is to maximize the mean velocity of all cars. Now consider a scenario where there is a single AI car (the red car in the figure) and many cars driven by humans (the grey car). 

In this setting, under this simpler "proxy" reward, the optimal policy for the red(AI) car is to park and not merge onto the highway.[^1]

[^1]: Interestingly, it turns out that systems that use simpler function representations may reward hackless in this example than more complex representations. See Pan, Bhatia and Steinhardt's paper "The Effects of Reward Misspecification: Mapping and Mitigating Misaligned Models" for details.

![Pan, Bhatia, Steinhardt ICLR 2022; [source](https://openreview.net/pdf?id=JYtwGwIL7ye)](commute_time.png){#fig-commute width=300px}

**Questions:**

a. Explain why the optimal policy for the AI car is not to merge onto the highway. [2 pts]

b. Note this behavior is not aligned with the true reward function. Share some ideas about alternate reward functions (that are not minimizing commute) that might still be easier to optimize, but would not result in the AI car never merging. Your answer should be 2-5 sentences and can include equations: there is not a single answer and reasonable solutions will be given full credit. [3 pts]


<div class="answer">
Answers:

a. Because if the agent just let the red car park and never merge, its velocity stays at 0, and the human drivers maintain higher average speed; while if the agent lets it merge, the average velocity of all cars would be lowered. Following this, the agent finds that not merging the red car is optimal under this flawed proxy reward.

b. Naively I thought about maximizing the minimum velocity of all cars. That does counter the hacking mentioned in subquestion a, but after a while it occured to me that this probably will lead to overly aggressive policies.
<br>
So a better proxy reward may be to make the metric time-dependent, like maximizing time-weighted average velocity of all cars, which is, in non-rigorous but plain words, to only count velocity of cars that has been moving for a while at a time point. In math-y expression:
$$r_t = \frac{\sum_{i=1}^N p(i) \cdot v_i(t)}{\sum_{i=1}^N p(i)},
$$
<br>
where $i$ is the index of a car, $N$ is total number of cars, and $p$ is the predicate that:
$$p(i) = \begin{cases}
			0, & \text{if car $i$ is not moving}\\
            1, & \text{if car $i$ is moving}
         \end{cases}.
$$

</div>

## Bellman Residuals and performance bounds [30 pts]

In this problem, we will study value functions and properties of the Bellman backup operator.

**Definitions:** Recall that a value function is a $|S|$-dimensional vector where $|S|$ is the number of states of the MDP. When we use the term $V$ in these expressions as an ``arbitrary value function'', we mean that $V$ is an arbitrary $|S|$-dimensional vector which need not be aligned with the definition of the MDP at all.

On the other hand, $V^\pi$ is a value function that is achieved by some policy $\pi$ in the MDP.

For example, say the MDP has 2 states and only negative immediate rewards. $V = [1,1]$ would be a valid choice for $V$ even though this value function can never be achieved by any policy $\pi$, but we can never have a $V^\pi = [1,1]$. This distinction between $V$ and $V^\pi$ is important for this question and more broadly in reinforcement learning.

**Properties of Bellman Operators:** In the first part of this problem, we will explore some general and useful properties of the Bellman backup operator, which was introduced during lecture. We know that the Bellman backup operator $B$, defined below is a contraction with the fixed point as $V^*$, the optimal value function of the MDP. The symbols have their usual meanings. $\gamma$ is the discount factor and $0 \leq \gamma < 1$. In all parts, $\|v\| = \max_{s} | v(s) |$ is the infinity norm of the vector.
$$(BV)(s) = \max_a \left( r(s, a) + \gamma\sum_{s' \in S}p(s'|s,a)V(s') \right).
$$

We also saw the contraction operator $B^\pi$ with the fixed point $V^\pi$, which is the Bellman backup operator for a particular policy given below:
$$(B^\pi V)(s) = r(s,\pi(s)) + \gamma\sum_{s' \in S}p(s'|s,\pi(s))V(s').
$$

In this case, we'll assume $\pi$ is deterministic, but it doesn't have to be in general. In class, we showed that $|| BV - BV' || \leq \gamma ||V - V'||$ for two arbitrary value functions $V$ and $V'$. 

**Questions a-c:**

a. Show that the analogous inequality, $|| B^\pi V - B^\pi V' || \leq \gamma ||V - V'||$, also holds. [3 pts].

b. Prove that the fixed point for $B^\pi$ is unique. Recall that the fixed point is defined as $V$ satisfying $V = B^\pi V$. You may assume that a fixed point exists. \textit{Hint:} Consider proof by contradiction. [3 pts].

c. Suppose that $V$ and $V'$ are vectors satisfying $V(s) \leq V'(s)$ for all $s$. Show that $B^\pi V(s) \leq B^\pi V'(s)$ for all $s$. Note that all of these inequalities are element-wise. [3 pts].

<div class="answer">
Answers:

a. By the definition of Bellman Operator with any value function for a particular policy, we can write the LHS $||B^{\pi}V - B^{\pi}V'||$ as
$$
\begin{array}{rl}
||B^{\pi}V - B^{\pi}V'|| = & ||r(s, \pi(s)) + \gamma \sum_{s'\in S} p(s'|s, \pi(s)) V(s') \\
        & - \left(r(s, \pi(s)) + \gamma \sum_{s'\in S} p(s'|s, \pi(s)) V'(s') \right) || \\
      = & ||\gamma \sum_{s'\in S} p(s'|s, \pi(s)) V(s') - \gamma \sum_{s'\in S} p(s'|s, \pi(s)) V'(s')|| \\
      = & \gamma ||\sum_{s'\in S} \Bigl[ p(s'|s, \pi(s)) \cdot \left(V(s') - V'(s') \right) \Bigr]|| \quad \text{(for $0 \le \gamma < 1$)} \\
    \le & \gamma \cdot \sum_{s'\in S} p(s'|s, \pi(s)) \cdot || \sum_{s'\in S} (V(s) - V'(s)) || \quad \text{(triangle inequality)} \\
      = & \gamma || \sum_{s'\in S} (V(s) - V'(s)) || \quad \text{(sum of probabilities is 1)} \\
    \le & \gamma || V - V' || \qquad \text{(by the definition of infinity norm)}
\end{array}
$$
As such, the inequality holds true. $\blacksquare$

b. Use proof by contradiction. According to the premise, a fixed point exists. Denote it as $V_1$. Assume there exists another fixed point $V_2$ that is different than $V_1$. By the definition of fixed point, we then have $V_1 = B^{\pi} V_1$ and $V_2 = B^{\pi} V_2$, which leads to $||B^{\pi} V_1 - B^{\pi} V_2|| = ||V_1 - V_2||$. Substitute it into the general inequality derived in subproblem a, we obtain:
$$
\begin{array}{rl}
||B^{\pi} V_1 - B^{\pi} V_2|| = & ||V_1 - V_2|| \le \gamma ||V_1 - V_2|| \\
\Rightarrow & 1 \le \gamma \quad \text{, by the assumption $V_1 \ne V_2$.}
\end{array}$$
However, this contradicts with $0 \le \gamma < 1$. Therefore, the original statement is true.

c. For verifying inequality, consider using subtraction. By the definition of Bellman Operator, compare the difference between $B^{\pi}V(s) - B^{\pi}V'(s)$ for all $s$:
$$
\begin{array}{rl}
B^{\pi}V(s) - B^{\pi}V'(s) = & r(s, \pi(s)) + \gamma \sum_{s'\in S} p(s'|s, \pi(s)) V(s') \\
        & - \left(r(s, \pi(s)) + \gamma \sum_{s'\in S} p(s'|s, \pi(s)) V'(s') \right) \\
      = & \gamma \bigl( \sum_{s'\in S} p(s'|s, \pi(s)) V(s') - \sum_{s'\in S} p(s'|s, \pi(s)) V'(s') \bigr) \\
      = & \gamma \cdot \bigl( \sum_{s'\in S} p(s'|s, \pi(s)) \bigr) \cdot \bigl( V(s') - V'(s') \bigr) \\
      = & \gamma \cdot \bigl( V(s') - V'(s') \bigr) \\
    \le & 0 \qquad \text{ ($\gamma \in [0, 1)$ and $V(s') - V'(s') \le 0$ $\forall s'$).}
\end{array}
$$
So we have $B^{\pi}V(s) \le B^{\pi}V'(s)$.
</div>